C51 COMPILER V9.60.0.0   UTILS                                                             08/15/2021 15:15:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UTILS
OBJECT MODULE PLACED IN .\Objects\utils.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE utils.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\uti
                    -ls.lst) TABS(2) OBJECT(.\Objects\utils.obj)

line level    source

   1          #include <REGX51.H>
   2          #include<stdio.h>
   3          #include "LCD.h"
   4          #include "i2c.h"
   5          #include "utils.h"
   6          #include<string.h>
   7          
   8          static param_t rtc_param;
   9          rtc_t curr_time;
  10          void detect_menu_button_press() {
  11   1        if (BTN_MENU == PRESSED) {
  12   2          while (BTN_MENU == PRESSED);
  13   2          config_RTC();
  14   2        }
  15   1      }
  16          
  17          void config_RTC() {
  18   1        rtc_param = hh;
  19   1        RTC_read_time(&curr_time);
  20   1        comwrt(0x0E); // blink cursor
  21   1        while (1) {
  22   2      
  23   2          switch (rtc_param) {
  24   3          case hh:
  25   3            comwrt(0x80); // hours
  26   3            disp_bdc(curr_time.hour);
  27   3            break;
  28   3          case mm:
  29   3            comwrt(0x83); // min
  30   3            disp_bdc(curr_time.min);
  31   3            break;
  32   3          case ss:
  33   3            comwrt(0x86); // sec
  34   3            disp_bdc(curr_time.sec);
  35   3            break;
  36   3          case DD:
  37   3            comwrt(0xC0); // date
  38   3            disp_bdc(curr_time.date);
  39   3            break;
  40   3          case MM:
  41   3            comwrt(0xC3); // month
  42   3            disp_bdc(curr_time.month);
  43   3            break;
  44   3          case YY:
  45   3            comwrt(0xC6); // year
  46   3            disp_bdc(curr_time.year);
  47   3            break;
  48   3          default:
  49   3            comwrt(0x0C); //blink OFF
  50   3            RTC_set_time(&curr_time);
  51   3            return;
  52   3      
  53   3          }
  54   2          if (BTN_INC == PRESSED) {
C51 COMPILER V9.60.0.0   UTILS                                                             08/15/2021 15:15:37 PAGE 2   

  55   3            while (BTN_INC == PRESSED);
  56   3            modify_RTC_data(1); //,&curr_time);
  57   3      
  58   3          }
  59   2          if (BTN_DEC == PRESSED) {
  60   3            while (BTN_DEC == PRESSED);
  61   3            modify_RTC_data(0); //,&curr_time);
  62   3      
  63   3          }
  64   2          if (BTN_MENU == PRESSED) {
  65   3            while (BTN_MENU == PRESSED);
  66   3            rtc_param++;
  67   3      
  68   3          }
  69   2        }
  70   1      
  71   1      }
  72          
  73          void modify_RTC_data(unsigned char oper) //,rtc_t *curr_time)
  74          {
  75   1      
  76   1        switch (rtc_param) {
  77   2        case ss:
  78   2          vaidate_data(&curr_time.sec, 0, 60, oper);
  79   2          break;
  80   2        case mm:
  81   2          vaidate_data(&curr_time.min, 0, 60, oper);
  82   2          break;
  83   2        case hh:
  84   2          vaidate_data(&curr_time.hour, 0, 24, oper);
  85   2          break;
  86   2        case DD:
  87   2          vaidate_data(&curr_time.date, 1, 31 + 1, oper);  //Max 31
  88   2          break;
  89   2        case MM:
  90   2          vaidate_data(&curr_time.month, 1, 12 + 1, oper); //Max 12
  91   2          break;
  92   2        case YY:
  93   2          vaidate_data(&curr_time.year, 1, 100, oper); // max 99
  94   2          break;
  95   2        }
  96   1      }
  97          void vaidate_data(unsigned char *val, unsigned char min, unsigned char max, unsigned char oper) {
  98   1      
  99   1        unsigned char dec = BCD_DEC(*val);
 100   1      
 101   1        if (oper == 1) {
 102   2          dec += 1;
 103   2        } else {
 104   2          dec -= 1;
 105   2        }
 106   1        if (dec >= max) {
 107   2          dec = min;
 108   2        }
 109   1        *val = DEC_BCD(dec);
 110   1      
 111   1      }
 112          
 113          unsigned char BCD_DEC(unsigned char bcd) {
 114   1        unsigned char dec;
 115   1      
 116   1        dec = ((bcd >> 4) * 10) + (bcd & 0x0F);
C51 COMPILER V9.60.0.0   UTILS                                                             08/15/2021 15:15:37 PAGE 3   

 117   1        return dec;
 118   1      }
 119          unsigned char DEC_BCD(unsigned char dec) {
 120   1        unsigned char bcd;
 121   1      
 122   1        bcd = ((dec / 10) << 4) | (dec % 10);
 123   1        return bcd;
 124   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    338    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
